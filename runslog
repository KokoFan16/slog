#!/usr/bin/env python3

"""
Runs a slog file on a specifed server

USAGE: `./runslog <server-address IP> <slogfile> <outrelname> [<factdir>]`
e.g. `./runslog localhost  ./entrypoint.slog ./my/factdir`
     `./runslog localhost ./someentry.slog ./some/knowledge.facts`
     `./runslog localhost ./anotherentry.slog`

fact directory is optional.
However, the output will be stored on the server, and `dumpslog` needs to be used
to get the output... dumpslog does not exist at the moment.
"""

import os
import sys
import time

import grpc
from yaspin import yaspin

from slog.common.client import SlogClient, ConsoleWriter, NoneWriter
import slog.protobufs.slog_pb2_grpc as slog_pb2_grpc

def main():
    """
    Does what main does, collect arguments and run top-level functions.
    """
    if len(sys.argv) not in {3, 4}:
        print("3 or 4 arguments required! See usage at top of file!")
        sys.exit()
    server = sys.argv[1] + ":5108" # add gRPC port
    slogfile = os.path.join(os.getcwd(), sys.argv[2]) # make absolute path
    #outrel = sys.argv[3] # TODO!
    if len(sys.argv) == 4:
        factdir = sys.argv[3] # optional!
    else:
        factdir = None
    cores = 2 # TODO: make this a CLI argument!

    client = SlogClient(server)

    cur_db = ""
    with yaspin(text="Compiling slog file") as spinner:
        out = client.compile_slog(slogfile, spinner)
        if out:
            cur_db, program_hashes = out
        else:
            spinner.write("Error compiling slog")
            return

        if factdir:
            cur_db = client.upload_csvs(factdir, spinner)
            if not cur_db:
                spinner.write("Error uploading facts")
                return
        else:
            spinner.write("No input facts, continuing...")

        spinner.write(f"DB: {cur_db}")
        spinner.text = "Running program..."
        cur_db = client.run_with_db(slogfile, cur_db, cores, spinner)
        if not cur_db:
            spinner.write("Error running file")

        client.pretty_dump_relation("path", spinner)

        client.text = "FINISHED!"


if __name__ == '__main__':
    main()
