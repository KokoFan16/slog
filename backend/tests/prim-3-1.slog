;; Written by Davis Silverman and Yihao Sun!!!
;; Rewritten in Slog by Kris Micinski

;; Scheme free variables
[(free x e) <-- (var e x)]

[(free x e)
 <--
 (lambda e vars body)
 (free x body)
 (lambda_arg_list vars _ y)
 (=/= x y)]

[(free x e)
 <--
 (call e func args)
 (or (free x func) (free x args))]

[(free x e)
 <--
 (prim_call e _ args)
 (free x args)]

[(free x e)
 <--
 (call_arg_list e pos arg)
 (free x arg)]

[(free x e)
 <--
 (if e eguard et ef)
 (or (free x eguard) (free x et) (free x ef))]

[(free y e)
 <-- 
 (setb e _ ev)
 (free y ev)]

[(free x e)
 <--
 (callcc e ev)
 (free x ev)]

[(free x e)
 <--
 (let e binders body)
 (or (free x binders) (free x body))]

[(free x e)
 <--
 (let_list e a binder)
 (free x binder)
 (=/= x a)]

;; Injection

[(E e [(null) (null) (null)] (kaddr e [(null) (null) (null)]))
 (peek_ctx e [(null) (null) (null)] [e (null) (null)])
 (store (kaddr e [(null) (null) (null)]) (mt))
 <--
 (top_exp e)]

;; Context propagation
[(peek_ctx e [c0 c1 c2] [e c0 c1])
 <-- 
 (E e [c0 c1 c2] _)
 (or (callcc e _) (call e _ _) (let e _ _) (lambda e _ _))]

;; Copy contexts
[(store (vaddr fv to) v)
 <--
 (copy_ctx from to e)
 (free fv e)
 (store (vaddr fv from) v)]

;;;;;;;; Step functions

;;;; Evaluation
;;;;  E states produce values returned in A states.

;; conditional
[(E eguard ctx (kaddr eguard ctx))
 (store (kaddr eguard ctx) (ifk et ef ctx ak))
 (flow_ee e eguard)
 <--
 (E e ctx ak)
 (if e eguard et ef)]

;; call/cc expression
[(E elam ctx (kaddr elam ctx))
 (store (kaddr elam ctx) (callcck ectx ak))
 (flow_ee e elam)
 <--
 (E e ctx ak)
 (callcc e elam)
 (peek_ctx e ctx ectx)]

;; set! expression
[(E esetto ctx (kaddr esetto ctx))
 (store (kaddr esetto ctx) (setk (vaddr x ctx)))
 (flow_ee e esetto)
 <--
 (E e ctx ak)
 (setb e x esetto)]

;; untagged application
[(E efunc ctx (kaddr efunc ctx))
 (store (kaddr efunc ctx) (argk eargs ctx ectx ak))
 (flow_ee e efunc)
 <--
 (E e ctx ak)
 (call e efunc eargs)
 (peek_ctx e ctx ectx)]

;; let-binding expression
[(E ebnd ctx (kaddr ebnd ctx))
 (store (kaddr ebnd ctx) (letk (vaddr x ectx) ebody ectx ak))
 (copy_ctx ctx ectx e)
 (flow_ee e ebnd)
 <--
 (E e ctx ak)
 (let e ll ebody)
 (let_list ll x ebnd)
 (peek_ctx e ctx ectx)]

;; binary primitive operation expression
[(E earg0 ctx (kaddr earg0 ctx))
 (store (kaddr earg0 ctx) (prim1 op earg1 ctx ak))
 (flow_ee e earg0)
 <--
 (E e ctx ak)
 (prim_call e op pl)
 (call_arg_list pl 0 earg0)
 (call_arg_list pl 1 earg1)]

;;;;;;;; Atomic evaluation
;;;;;;;; ⟨E ... ⟩ → ⟨A ...⟩ → ⟨E ... ⟩ ...

;; numbers
[(A (number n) ak)
 (flow_ea e (number n))
 <--
 (E e ctx ak)
 (num e n)]

;; booleans
[(A (boolv b) ak)
 (flow_ea e (boolv b))
 <--
 (E e ctx ak)
 (bool e b)]

;; closures
[(A (closure e ctx) ak)
 (flow_ea e (closure e ctx))
 <--
 (E e ctx ak)
 (lambda e _ _)]

;; variable ref
[(A v ak)
 (flow_ea e v)
 <--
 (E e ctx ak)
 (var e x)
 (store (vaddr x ctx) v)]

;; A application forms

;; return conditional true
[(E et ctx_k next_ak)
 (flow_ae (boolv 1) et)
 <-- 
 (or (A (boolv 1) ak) (A (closure _ _) ak)
     (A (number _) ak) (A (kont _) ak))
 (store ak (ifk et _ ctx_k next_ak))] ;; todo: any truthy (non-0?)

;; return conditional false
[(E et ctx_k next_ak)
 (flow_ae (boolv 0) et)
 <-- 
 (A (boolv 0) ak)  ;; todo bad type (num)
 (store ak (ifk et _ ctx_k next_ak))]

;; cc calling a continuation instead of a lambda
;; such as (call/cc (call/cc (λ (k) k)))
[(A (kont ak) bk)
 (flow_aa (kont bk) (kont ak))
 <--
 (A (kont bk) ak)
 (store ak (callcc _ _))]

;; processed fn, now to process argument.
[(E earg ctx (kaddr earg ctx))
 (store (kaddr earg ctx) (fn v pos ectx next_ak))
 (flow_ae v earg)
 <--
 (A v ak)
 (store ak (argk eargs ctx ectx next_ak))
 (call_arg_list eargs pos earg)]

;; processed arg, call closure
[(E ebody ectx next_ak)
 (store (vaddr x ectx) v)
 (copy_ctx ctx_clo ectx elam)
 (flow_ae v ebody)
 (here ebody pos x v ectx)
 <--
 (A v ak)
 (store ak (fn (closure elam ctx_clo) pos ectx next_ak))
 (lambda elam params ebody)
 (lambda_arg_list params pos x)]

;; processed arg, call continuation
[(A v callcck)
 (flow_aa v v)
 <--
 (A v ak)
 (store ak (fn (kont callcck) 0 _ _))]

;; Processed Let bindings, evaluating body.
[(E ebody ctx next_ak)
 (store av v)
 (flow_ae v ebody)
 <--
 (A v ak)
 (store ak (letk av ebody ctx next_ak))]

;; Processed arg0 of prim, now process arg1.
[(E earg1 ctx (kaddr earg1 ctx))
 (store (kaddr earg1 ctx) (prim2 op v next_ak))
 (flow_ae v earg1)
 <--
 (A v ak)
 (store ak (prim1 op earg1 ctx next_ak))]

;; Processed prim args, return prim val.
[(A (primval op v1 v2) next_ak)
 (flow_aa v2 (primval op v1 v2))
 <--
 (A v2 ak)
 (store ak (prim2 op v1 next_ak))]

;; set! (we return a sentinel here, but it can be anything!)
[(A (number 1) next_ak)
 (store loc v)
 (flow_aa v (num 1))
 <--
 (A v ak)
 (store ak (setk loc next_ak))]
;; Program is...
;; ((λ (f) (let ((m1089 (f 1)) 
;;               (m1088 (f 0)) 
;;               (m1090 (f 0))) 
;;           m1090))
;;  (λ (z) 
;;     ((λ (x) 
;;         (+ z (+ z (+ z (+ z (+ z z)))))) 
;;     (λ (x) x))))
;; Facts are...
(num	524280	0)
(num	524281	0)
(num	524282	1)
(var	524283	524284)
(var	524285	524286)
(var	524287	524286)
(var	524288	524286)
(var	524289	524286)
(var	524290	524286)
(var	524291	524286)
(var	524292	524293)
(var	524294	524295)
(var	524296	524295)
(var	524297	524295)
(lambda_arg_list	524298	0	524284)
(lambda_arg_list	524299	0	524284)
(lambda_arg_list	524300	0	524286)
(lambda_arg_list	524301	0	524295)
(top_exp	524302)
(let_list	524303	524304	524305)
(let_list	524303	524306	524307)
(let_list	524303	524293	524308)
(prim	524309	524310)
(prim	524311	524310)
(prim	524312	524310)
(prim	524313	524310)
(prim	524314	524310)
(call_arg_list	524315	0	524316)
(call_arg_list	524317	0	524318)
(call_arg_list	524319	1	524320)
(call_arg_list	524321	1	524322)
(call_arg_list	524323	1	524324)
(call_arg_list	524325	1	524326)
(call_arg_list	524327	1	524285)
(call_arg_list	524327	0	524287)
(call_arg_list	524325	0	524288)
(call_arg_list	524323	0	524289)
(call_arg_list	524321	0	524290)
(call_arg_list	524319	0	524291)
(call_arg_list	524328	0	524280)
(call_arg_list	524329	0	524281)
(call_arg_list	524330	0	524282)
(prim_call	524331	524314	524319)
(prim_call	524320	524313	524321)
(prim_call	524322	524312	524323)
(prim_call	524324	524311	524325)
(prim_call	524326	524309	524327)
(call	524302	524332	524315)
(call	524333	524334	524317)
(call	524308	524294	524328)
(call	524307	524296	524329)
(call	524305	524297	524330)
(let	524335	524303	524292)
(lambda	524316	524300	524333)
(lambda	524318	524298	524283)
(lambda	524334	524299	524331)
(lambda	524332	524301	524335)
;; Strings/symbols from the program have been interned to the following values, starting at 524280
;; g1186 <-> 524320
;; g1185 <-> 524291
;; g1184 <-> 524319
;; g1183 <-> 524314
;; g1190 <-> 524322
;; g1189 <-> 524290
;; g1188 <-> 524321
;; g1187 <-> 524313
;; g1178 <-> 524333
;; g1177 <-> 524316
;; g1176 <-> 524315
;; g1175 <-> 524292
;; g1182 <-> 524299
;; g1181 <-> 524331
;; g1180 <-> 524334
;; g1179 <-> 524300
;; g1202 <-> 524285
;; g1201 <-> 524287
;; g1200 <-> 524327
;; g1199 <-> 524309
;; g1206 <-> 524298
;; + <-> 524310
;; g1205 <-> 524283
;; z <-> 524286
;; m1088 <-> 524306
;; g1204 <-> 524318
;; g1203 <-> 524317
;; g1194 <-> 524324
;; g1193 <-> 524289
;; g1192 <-> 524323
;; g1191 <-> 524312
;; g1198 <-> 524326
;; g1197 <-> 524288
;; g1196 <-> 524325
;; g1195 <-> 524311
;; g1158 <-> 524302
;; f <-> 524295
;; m1089 <-> 524304
;; g1170 <-> 524281
;; g1169 <-> 524329
;; g1168 <-> 524296
;; g1167 <-> 524307
;; g1174 <-> 524280
;; g1173 <-> 524328
;; m1090 <-> 524293
;; g1172 <-> 524294
;; g1171 <-> 524308
;; g1162 <-> 524303
;; g1161 <-> 524301
;; g1160 <-> 524335
;; g1159 <-> 524332
;; g1166 <-> 524282
;; g1165 <-> 524330
;; g1164 <-> 524297
;; x <-> 524284
;; g1163 <-> 524305
