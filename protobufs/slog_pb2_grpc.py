# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

import slog_pb2 as slog__pb2


class CommandServiceStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.ExchangeHashes = channel.unary_unary(
                '/CommandService/ExchangeHashes',
                request_serializer=slog__pb2.HashesRequest.SerializeToString,
                response_deserializer=slog__pb2.Hashes.FromString,
                )
        self.PutHashes = channel.unary_unary(
                '/CommandService/PutHashes',
                request_serializer=slog__pb2.PutHashesRequest.SerializeToString,
                response_deserializer=slog__pb2.ErrorResponse.FromString,
                )
        self.Ping = channel.unary_unary(
                '/CommandService/Ping',
                request_serializer=slog__pb2.PingRequest.SerializeToString,
                response_deserializer=slog__pb2.Pong.FromString,
                )
        self.RunHashes = channel.unary_unary(
                '/CommandService/RunHashes',
                request_serializer=slog__pb2.RunHashesRequest.SerializeToString,
                response_deserializer=slog__pb2.Promise.FromString,
                )
        self.QueryPromise = channel.unary_unary(
                '/CommandService/QueryPromise',
                request_serializer=slog__pb2.PromiseRequest.SerializeToString,
                response_deserializer=slog__pb2.PromiseStatus.FromString,
                )
        self.GetRelations = channel.unary_unary(
                '/CommandService/GetRelations',
                request_serializer=slog__pb2.DatabaseRequest.SerializeToString,
                response_deserializer=slog__pb2.RelationDescriptionsResponse.FromString,
                )


class CommandServiceServicer(object):
    """Missing associated documentation comment in .proto file."""

    def ExchangeHashes(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def PutHashes(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Ping(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def RunHashes(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def QueryPromise(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetRelations(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_CommandServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'ExchangeHashes': grpc.unary_unary_rpc_method_handler(
                    servicer.ExchangeHashes,
                    request_deserializer=slog__pb2.HashesRequest.FromString,
                    response_serializer=slog__pb2.Hashes.SerializeToString,
            ),
            'PutHashes': grpc.unary_unary_rpc_method_handler(
                    servicer.PutHashes,
                    request_deserializer=slog__pb2.PutHashesRequest.FromString,
                    response_serializer=slog__pb2.ErrorResponse.SerializeToString,
            ),
            'Ping': grpc.unary_unary_rpc_method_handler(
                    servicer.Ping,
                    request_deserializer=slog__pb2.PingRequest.FromString,
                    response_serializer=slog__pb2.Pong.SerializeToString,
            ),
            'RunHashes': grpc.unary_unary_rpc_method_handler(
                    servicer.RunHashes,
                    request_deserializer=slog__pb2.RunHashesRequest.FromString,
                    response_serializer=slog__pb2.Promise.SerializeToString,
            ),
            'QueryPromise': grpc.unary_unary_rpc_method_handler(
                    servicer.QueryPromise,
                    request_deserializer=slog__pb2.PromiseRequest.FromString,
                    response_serializer=slog__pb2.PromiseStatus.SerializeToString,
            ),
            'GetRelations': grpc.unary_unary_rpc_method_handler(
                    servicer.GetRelations,
                    request_deserializer=slog__pb2.DatabaseRequest.FromString,
                    response_serializer=slog__pb2.RelationDescriptionsResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'CommandService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class CommandService(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def ExchangeHashes(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/CommandService/ExchangeHashes',
            slog__pb2.HashesRequest.SerializeToString,
            slog__pb2.Hashes.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def PutHashes(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/CommandService/PutHashes',
            slog__pb2.PutHashesRequest.SerializeToString,
            slog__pb2.ErrorResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def Ping(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/CommandService/Ping',
            slog__pb2.PingRequest.SerializeToString,
            slog__pb2.Pong.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def RunHashes(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/CommandService/RunHashes',
            slog__pb2.RunHashesRequest.SerializeToString,
            slog__pb2.Promise.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def QueryPromise(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/CommandService/QueryPromise',
            slog__pb2.PromiseRequest.SerializeToString,
            slog__pb2.PromiseStatus.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetRelations(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/CommandService/GetRelations',
            slog__pb2.DatabaseRequest.SerializeToString,
            slog__pb2.RelationDescriptionsResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
