;; Experiment generation scripts
#lang racket

(require "term-generators.rkt")

(define (write-worstcase-slog n m path)
  (define (write-kcfa-tiny m out)
    (define entryt (string-join (map (lambda (i) "e") (range 0 m)) " "))
    (define entryr (string-join (map (lambda (i) "e") (range 0 (add1 m))) " "))
    (define stepu (string-join (map (lambda (i) "_") (range 0 m)) " "))
    (define t0t1 (string-join (map (lambda (i) (format "t~a" i)) (range 0 m)) " "))
    (define ot0t1 (string-join (map (lambda (i) (format "ot~a" i)) (range 0 m)) " "))
    (define tot0t1 (string-join (map (lambda (i) (format "to_t~a" i)) (range 0 m)) " "))
    (define lamt0t1 (string-join (map (lambda (i) (format "lam_t~a" i)) (range 0 m)) " "))
    (define a0t0t1 (string-join (map (lambda (i) (format "a0_t~a" i)) (range 0 m)) " "))
    (define a1t0t1 (string-join (map (lambda (i) (format "a1_t~a" i)) (range 0 m)) " "))
    (define idt0 (string-join `("id" ,@(map (lambda (i) (format "t~a" i)) (range 0 (- m 1)))) " "))
    (define tclot0t1 (string-join (map (lambda (i) (format "to_clo_t~a" i)) (range 0 m)) " "))
    (define clot0t1 (string-join (map (lambda (i) (format "clo_t~a" i)) (range 0 m)) " "))
    (define (convert line)
      (foldl (match-lambda** [(`(,find . ,replace) str) (string-replace str find replace)])
             line
             `(("ENTRYT" . ,entryt)
               ("STEPU" . ,stepu)
               ("ENTRYR" . ,entryr)
               ("TCLOT0T1" . ,tclot0t1)
               ("CLOT0T1" . ,clot0t1)
               ("LAMT0T1" . ,lamt0t1)
               ("OT0OT1" . ,ot0t1)
               ("TOT0T1" . ,tot0t1)
               ("A0T0T1" . ,a0t0t1)
               ("A1T0T1" . ,a1t0t1)
               ("IDT0" . ,idt0)
               ("T0T1" . ,t0t1))))
    (for ([line (file->lines "kcfa-tiny-template.slog")])
      (displayln (convert line) out)))
  (define out (open-output-file path))
  ;; Write kcfa tiny
  (write-kcfa-tiny m out)
  ;; generate the term and write it
  (define prog (kcfa-tiny n))
  (define h (gen-kcfa-tiny n))
  (define formatted-program (pretty-format prog))
  (define lines (string-split formatted-program "\n"))
  (for ([line lines])
    (displayln (format ";; ~a" line) out))
  (for ([key (hash-keys h)])
    (for ([tuple (hash-ref h key)])
      (displayln (format "(~a ~a)" key (string-join (map number->string tuple) " ")) out))))

(define (write-worstcase-souffle n m path)
  (define out (open-output-file path))
  ;; Write kcfa tiny
  (write-kcfa-tiny m out)
  ;; generate the term and write it
  (define prog (kcfa-tiny n))
  (define h (gen-kcfa-tiny n))
  (define formatted-program (pretty-format prog))
  (define lines (string-split formatted-program "\n"))
  (for ([line lines])
    (displayln (format ";; ~a" line) out))
  (for ([key (hash-keys h)])
    (for ([tuple (hash-ref h key)])
      (displayln (format "(~a ~a)" key (string-join (map number->string tuple) " ")) out))))

(for ([n (range 2 8)])
  (for ([m (range 2 8)])
    (write-worstcase-slog n m (format "worstcase-~a-terms-~a-m.slog" n m))
    (write-worstcase-souffle n m (format "worstcase-~a-terms-~a-m.dl" n m))))

