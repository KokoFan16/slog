;; a slog version of `use_define_analysis.dl` in  ddisasm

;; Yihao Sun



; and only if those chains are related eventually to an access to memory.
; -'def' computes definitions of registers at each of the locations.
; -'used_for_address' compute the set of live uses backwards at each of the locations.
;  However, it only computes uses starting at accesses to memory.
; -'def_used' intersects the two previous facts to obtain def-use chains.
; -'straight_line_def_used` is a weaker version of 'def_used' that can be used before
; code inference.
; The traversal of used_for_address is kept intra-procedural (not following call edges).


;; local underapproximation of control flow


; .decl local_next(ea:address,ea_next:address)
[(local_next EA EA_next)
 <--
 (code_in_block EA Block)
 (may_fallthrough EA EA_next)
 (code_in_block EA_next Block)]


; .decl inter_procedural_jump(Src:address,Dest:address)
[(inter_procedural_jump Src Dest)
 <--
 (unconditional_jump Src)
 (direct_jump Src Dest)
 (direct_call OtherSrc Dest)
 (code OtherSrc)]

;; .decl block_next(ea:address,ea_next:address)
; block_next(EA,Block2):-
;     block_last_instruction(_,EA),
;     may_fallthrough(EA,Block2),
;     block(Block2).
[(block_next EA Block2)
 <--
 (block_last_instruction _ EA)
 (may_fallthrough EA Block2)
 (block Block2)]

; block_next(EA,EA_next):-
;     block_last_instruction(_,EA),
;     !arch.delay_slot(_,EA),
;     direct_jump(EA,EA_next),
;     !inter_procedural_jump(EA,EA_next).
[(block_next EA EA_next)
 <--
 (block_last_instruction _ EA)
;  (~ arch.delay_slot _ EA)
 (direct_jump EA EA_next)
 (~ inter_procedural_jump EA EA_next)]

; block_next(EA,EA_next):-
;     block_last_instruction(_,EA),
;     arch.delay_slot(JumpEA,EA),
;     direct_jump(JumpEA,EA_next),
;     !inter_procedural_jump(JumpEA,EA_next).

[(block_next EA EA_next)
 <--
 (block_last_instruction _ EA)
 (arch.delay_slot JumpEA EA)
 (direct_jump JumpEA EA_next)
 (~ inter_procedural_jump JumpEA EA_next)]

; block_next(EA,EA_next):-
;     block_last_instruction(_,EA),
;     jump_table_start(EA,Size,TableStart,TableReference,_),
;     //FIXME: Do better propagation of the jump table.
;     relative_address(_,Size,TableStart,TableReference,EA_next,_).

[(block_next EA EA_next)
 <--
 (block_last_instruction _ EA)
 (jump_table_start EA Size TableStart TableReference _)
 (relative_address _ Size TableStart TableReference EA_next)]


; def(EA,Reg):-
;     instruction_get_dest_op(EA,_,Op),
;     op_regdirect_contains_reg(Op,Reg).
[(def EA Reg)
 <--
 (instruction_get_dest_op EA _ Op)
 (op_regdirect_contains_reg Op Reg)]

; def(EA,Reg):-
;     instruction_get_operation(EA,Operation),
;     arch.call_operation(Operation),
;     !arch.delay_slot(EA,_),
;     arch.function_non_maintained_reg(Reg).
[(def EA Reg)
 <--
 (instruction EA _ _ Operation _ _ _ _ _ _)
 (arch.call_operation Operation)
; (~ arch.delay_slot _ EA)
 (arch.function_non_maintained_reg Reg)]

; def(EA,Reg):-
;     instruction_get_operation(Call,Operation),
;     arch.call_operation(Operation),
;     arch.delay_slot(Call,EA),
;     arch.function_non_maintained_reg(Reg).
[(def EA Reg)
 <--
 (instruction Call _ _ Operation _ _ _ _ _ _)
 (arch.call_operation Operation)
 (arch.delay_slot Call EA)
 (arch.function_non_maintained_reg Reg)]

; for X86_32

; def(EA,Reg):-
;     direct_call(EA,EA_pc_thunk),
;     get_pc_thunk(EA_pc_thunk,Reg).
[(def EA Reg)
 <--
 (direct_call EA EA_pc_thunk)
 (get_pc_thunk EA_pc_thunk Reg)]



; flow_def(EA_jump,Reg,EA_target,Immediate):-
;     code(EA),
;     cmp_immediate_to_reg(EA,Reg,_,Immediate),
;     next(EA,EA_jump),
;     direct_jump(EA_jump,EA_target),
;     instruction_get_operation(EA_jump,Operation),
;     arch.jump_equal_operation(Operation).
[(flow_def EA_jump Reg EA_target Immediate)
 <--
 (code EA)
 (cmp_immediate_to_reg EA Reg _ Immediate)
 (next EA EA_jump)
 (direct_jump EA_jump EA_target)
 (instruction EA_jump _ _ Operation _ _ _ _ _ _)
 (arch.jump_equal_operation Operation)]

; flow_def(EA_jump,Reg,EA_target,Immediate):-
;     code(EA),
;     cmp_immediate_to_reg(EA,Reg,_,Immediate),
;     next(EA,EA_jump),
;     direct_jump(EA_jump,_),
;     next(EA_jump,EA_target),
;     instruction_get_operation(EA_jump,Operation),
;     arch.jump_unequal_operation(Operation).
[(flow_def EA_jump Reg EA_target Immediate)
 <--
 (code EA)
 (cmp_immediate_to_reg  EA Reg _ Immediate)
 (next EA EA_jump)
 (direct_jump EA_jump _)
 (next EA_jump EA_target)
 (instruction EA_jump _ _ Operation _ _ _ _ _ _)
 (arch.jump_unequal_operation Operation)]

; .decl must_def(EA:address,Reg:register)

; must_def(EA,Reg):-
;     def(EA,Reg),
;     !arch.conditional_mov(EA).
[(must_def EA Reg)
 <--
 (def EA Reg)
 (~ arch.conditional_mov EA)]

; .decl defined_in_block(EA:address,Reg:register)

; defined_in_block(Block,Reg):-
;     def(EA,Reg),
;     code_in_block(EA,Block).
[(defined_in_block Block Reg)
 <--
 (def EA Reg)
 (code_in_block EA Block)]

; used(EA,Reg,Index):-
;     instruction_get_src_op(EA,Index,Op),
;     op_regdirect_contains_reg(Op,Reg).
[(used EA Reg Index)
 <--
 (instruction_get_src_op EA Index Op)
 (op_regdirect_contains_reg Op Reg)]

; used(EA,Reg,Index):-
;     instruction_get_op(EA,Index,Op),
;     op_indirect_contains_reg(Op,Reg).
[(used EA Reg Index)
 <--
 (instruction_get_op EA Index Op)
 (op_indirect_contains_reg Op Reg)]

; .decl used_in_block(EA:address,Reg:register)

; used_in_block(Block,Reg):-
;     used(EA,Reg,_),
;     code_in_block(EA,Block).
[(used_in_block Block Reg)
 <--
 (used EA Reg _)
 (code_in_block EA Block)]

; // the last address where a register was defined within the block
; .decl block_last_def(EA:address,EA_def:address,Reg:register)

; block_last_def(EA_next,EA,Reg):-
;     def(EA,Reg),
;     local_next(EA,EA_next).
[(block_last_def EA_next EA Reg)
 <--
 (def EA Reg)
 (local_next EA EA_next)]

; block_last_def(EA_next,EA_def,Reg):-
;     block_last_def(EA,EA_def,Reg),
;     !must_def(EA,Reg),
;     local_next(EA,EA_next).
[(block_last_def EA_next EA_def Reg)
 <--
 (block_last_def EA EA_def Reg)
 (~ must_def EA Reg)
 (local_next EA EA_next)]

; // the last address where a register was defined at the basic block level.
; .decl last_def(EA:address,EA_def:address,Reg:register)

; last_def(Block,EA,Reg):-
;     def(EA,Reg),
;     block_next(EA,Block),
;     !flow_def(EA,Reg,Block,_).
;; slog do not support negation wildcard
; [(flow_def4 EA Reg Block) <-- (flow_def EA Reg Block _)]
[(last_def Block EA Reg)
 <--
 (def EA Reg)
 (block_next EA Block)
 (~ flow_def EA Reg Block _)]

; last_def(Block,EA_def,Reg):-
;     block_last_def(Block_end,EA_def,Reg),
;     !must_def(Block_end,Reg),
;     block_next(Block_end,Block),
;     !flow_def(Block_end,Reg,Block,_).
[(last_def Block EA_def Reg)
 <--
 (block_last_def Block_end EA_def Reg)
 (~ must_def Block_end Reg)
 (block_next Block_end Block)
 (~ flow_def Block_end Reg Block _)]

; last_def(Block_next,EA_def,Reg):-
;     last_def(Block,EA_def,Reg),
;     !defined_in_block(Block,Reg),
;     block_last_instruction(Block,Block_end),
;     block_next(Block_end,Block_next),
;     !flow_def(Block_end,Reg,Block,_).
[(last_def Block_next EA_def Reg)
 <--
 (last_def Block EA_def Reg)
 (~ defined_in_block Block Reg)
 (block_last_instruction Block Block_end)
 (block_next Block_end Block_next)
 (~ flow_def Block_end Reg Block _)]

; last_def(Block_next,Block_end,Reg):-
;     flow_def(Block_end,Reg,Block_next,_).
[(last_def Block_next Block_end Reg)
 <--
 (flow_def Block_end Reg Block_next _)]


; def_used_intra(EA_def,Reg,EA_used,Index):-
;     used(EA_used,Reg,Index),
;     block_last_def(EA_used,EA_def,Reg).
[(def_used_intra EA_def Reg EA_used Index)
 <--
 (used EA_used Reg Index)
 (block_last_def EA_used EA_def Reg)]

; def_used_intra(EA_def,Reg,EA_used,Index):-
;     last_def(Block,EA_def,Reg),
;     code_in_block(EA_used,Block),
;     !block_last_def(EA_used,_,Reg),
;     used(EA_used,Reg,Index).
; [(block_last_def2 EA_used Reg) <-- (block_last_def EA_used _ Reg)]
[(def_used_intra EA_def Reg EA_used Index)
 <--
 (last_def Block EA_def Reg)
 (code_in_block EA_used Block)
 (~ block_last_def EA_used _ Reg)
 (used EA_used Reg Index)]

; def_used(EA_def,Reg,EA_used,Index):-
;     def_used_intra(EA_def,Reg,EA_used,Index).
[(def_used EA_def Reg EA_used Index)
 <--
 (def_used_intra EA_def Reg EA_used Index)]

; def_used(EA_def,Reg,EA_used,Index_used):-
;     def_used_return_val_reg(EA_def,_,Reg,EA_used,Index_used).
[(def_used EA_def Reg EA_used Index_used)
 <--
 (def_used_return_val_reg EA_def _ Reg EA_used Index_used)]

; // reg: return-value register
; // ea_used: use of the return-value register after a call
; // ea_call: the corresponding call
; // ea_def: def of the return-value register in the callee
; .decl def_used_return_val_reg(ea_def:address,ea_call:address,reg:register,ea_used:address,index_used:operand_index)
; .output def_used_return_val_reg

; def_used_return_val_reg(EA_def,EA_call,Reg,EA_used,Index_used):-
;     arch.return_val_reg(Reg),
;     def_used_intra(EA_call,Reg,EA_used,Index_used),
;     direct_call(EA_call,Callee),
;     fde_addresses(Callee,End),
;     arch.return(CalleeReturn),
;     Callee <= CalleeReturn,
;     CalleeReturn < End,
;     code_in_block(CalleeReturn,CalleeReturnBlock),
;     block_last_instruction(CalleeReturnBlock,CalleeReturnBlock_end),
;     (
;         block_last_def(CalleeReturnBlock_end,EA_def,Reg)
;         ;
;         !block_last_def(CalleeReturnBlock_end,_,Reg),
;         last_def(CalleeReturnBlock,EA_def,Reg)
;     ).
[(def_used_return_val_reg EA_def EA_call Reg EA_used Index_used)
 <--
 (arch.return_val_reg Reg)
 (def_used_intra EA_call Reg EA_used Index_used)
 (direct_call EA_call Callee)
 (fde_addresses Callee End)
 (arch.return CalleeReturn)
 (<= Callee CalleeReturn)
 (< CalleeReturn End)
 (code_in_block CalleeReturn CalleeReturnBlock)
 (block_last_instruction CalleeReturnBlock CalleeReturnBlock_end)
 (block_last_def CalleeReturnBlock_end EA_def Reg)]
; [(block_last_def3 CalleeReturnBlock_end Reg) <-- (block_last_def CalleeReturnBlock_end _ Reg)]
[(def_used_return_val_reg EA_def EA_call Reg EA_used Index_used)
 <--
 (arch.return_val_reg Reg)
 (def_used_intra EA_call Reg EA_used Index_used)
 (direct_call EA_call Callee)
 (fde_addresses Callee End)
 (arch.return CalleeReturn)
 (<= Callee CalleeReturn)
 (< CalleeReturn End)
 (code_in_block CalleeReturn CalleeReturnBlock)
 (block_last_instruction CalleeReturnBlock CalleeReturnBlock_end)
 (~ block_last_def CalleeReturnBlock_end _ Reg)
 (last_def CalleeReturnBlock EA_def Reg)]

; .decl def_used_for_address(EA_def:address,Reg:register)
; .output def_used_for_address

; def_used_for_address(EA_def,Reg):-
;     def_used(EA_def,Reg,EA,Index),
;     instruction_get_op(EA,Index,Op),
;     op_indirect_contains_reg(Op,Reg).
[(def_used_for_address EA_def Reg)
 <--
 (def_used EA_def Reg EA Index)
 (instruction_get_op EA Index Op)
 (op_indirect_contains_reg Op Reg)]

; def_used_for_address(EA_def,Reg):-
;     reg_jump(EA_used,Reg),
;     def_used(EA_def,Reg,EA_used,_).
[(def_used_for_address EA_def Reg)
 <--
 (reg_jump EA_used Reg)
 (def_used EA_def Reg EA_used _)]

; def_used_for_address(EA_def,Reg):-
;     reg_call(EA_used,Reg),
;     def_used(EA_def,Reg,EA_used,_).
[(def_used_for_address EA_def Reg)
 <--
 (reg_call EA_used Reg)
 (def_used EA_def Reg EA_used _)]

; def_used_for_address(EA_def,Reg):-
;     def_used_for_address(EA_used,_),
;     def_used(EA_def,Reg,EA_used,_).
[(def_used_for_address EA_def Reg)
 <--
 (def_used_for_address EA_used _)
 (def_used EA_def Reg EA_used _)]

; // straight_line_def_used is a weaker version than def_used
; // that can be used BEFORE code inference.
; // the last address where a register was defined within the block
; .decl straight_line_last_def(EA:address,EA_def:address,Reg:register)
; straight_line_last_def(EA_next,EA,Reg):-
;     def(EA,Reg),
;     possible_ea(EA),
;     must_fallthrough(EA,EA_next),
;     possible_ea(EA_next).
[(straight_line_last_def EA_next EA Reg)
 <--
 (def EA Reg)
 (possible_ea EA)
 (must_fallthrough EA EA_next)
 (possible_ea EA_next)]

; straight_line_last_def(EA_next,EA_def,Reg):-
;     straight_line_last_def(EA,EA_def,Reg),
;     !must_def(EA,Reg),
;     must_fallthrough(EA,EA_next),
;     possible_ea(EA_next).
[(straight_line_last_def EA_next EA_def Reg)
 <--
 (straight_line_last_def EA EA_def Reg)
 (~ must_def EA Reg)
 (must_fallthrough EA EA_next)
 (possible_ea EA_next)]

; .decl straight_line_def_used(EA_def:address,Reg:register,EA_used:address,Index:unsigned)
; .output straight_line_def_used
; straight_line_def_used(EA_def,Reg,EA_used,Index):-
;     used(EA_used,Reg,Index),
;     straight_line_last_def(EA_used,EA_def,Reg).
[(straight_line_def_used EA_def Reg EA_used Index)
 <--
 (used EA_used Reg Index)
 (straight_line_last_def EA_used EA_def Reg)]
