
(graph 0 0)
(graph 0 1)
(graph 0 2)
(graph 0 3)
(graph 0 4)
(graph 0 5)
(graph 0 6)
(graph 1 0)
(graph 1 1)
(graph 1 2)
(graph 1 3)
(graph 1 4)
(graph 1 5)
(graph 2 0)
(graph 2 1)
(graph 2 2)
(graph 2 3)
(graph 2 4)
(graph 2 5)
(graph 3 3)
(graph 3 4)
(graph 3 5)
(graph 4 4)
(graph 4 5)
(graph 5 5)
(graph 6 6)
(graph 6 3)
(graph 6 2)
(graph 7 6)
(graph 6 7)
(graph 6 8)
(graph 8 8)
(graph 8 6)

; assumes an input relation 'graph'

; compute 2-cliques: prunes irreflexive vertices; reflexivity can now be assumed
[(2cl x y) <-- (graph x y) (< x y)]
[(2cl x y) <-- (graph y x) (< x y)]

; compute 3-cliques (note ordering already checked by 2cl rule)
[(3cl x y z) <-- (2cl x y) (2cl y z) (2cl x z)]

; compute 4-cliques
[(4cl w x y z)
 <--
 (2cl w z)
 --
 (3cl w x y)
 (3cl x y z)]

; compute 5-cliques
[(5cl v w x y z)
 <--
 (2cl v z)
 --
 (4cl v w x y)
 (4cl w x y z)]

