#lang racket

;; Slog->Souffle compilation
;; Copyright (c) Kris Micinski, et al, see License.md

(provide slog-compile-souffle)

(require
 "interpreter.rkt"
 "lang-predicates.rkt"
 "slog-params.rkt"
 "graphs.rkt"
 "utils.rkt"
 "builtins.rkt"

 "organize-pass.rkt"
 ; IR 1: ir-flat?
 "static-unification-pass.rkt"
 "fix-arities-pass.rkt"
 ; IR 2: ir-fixed?
 "partitioning-pass.rkt")

(define (slog-compile-souffle source-tree)
  (define (time op)
    (Î» args
      (define before (current-inexact-milliseconds))
      (define res (apply op args))
      (define elapsed (- (current-inexact-milliseconds) before))
      (when (> elapsed 5000)
        (printf "~a took ~a ms!\n" (object-name op) (~r elapsed #:precision 0)))
      res))
  (define (r->s x) (string->symbol (string-replace (symbol->string x) "-" "_")))
  (parameterize ([current-source-tree source-tree])
    (let ([partitioned-ir ((time partitioning-pass)
                           ((time fix-arities-pass)
                            ((time static-unification-pass)
                             ((time organize-pass)
                              source-tree))))])
      (match-define `(ir-small ,old-ir ,rules-h) partitioned-ir)
      (define relation-txt
        (foldl (lambda (rule acc)
                 (define (c lst) (map symbol->string lst))
                 (match-define (cons rel-txt decls) acc)
                 (define (add-decl name arity acc)
                   (match-define (cons rel-txt decls) acc)
                   (if (builtin? name)
                       acc
                       (cons rel-txt (set-add decls (format ".decl ~a(~a)\n.input ~a\n\n"
                                                            name
                                                            (string-join (map (lambda (i) (format "x~a:number" i)) (range (add1 arity))) ",") name)))))
                 (define (rtn acc txt)
                   (cons txt (cdr acc)))
                 (match (strip-prov rule)
                   [`(srule ((rel-arity ,rhnamer ,rharity) ,hargs ...)
                            (= ,id0 ((rel-arity ,b0namer ,b0arity) ,b0args ...))
                            (= ,id1 ((rel-arity ,b1namer ,b1arity) ,b1args ...)))
                    (define rhname (r->s rhnamer))
                    (define b0name (r->s b0namer))
                    (define b1name (r->s b1namer))
                    (add-decl b0name b0arity
                              (add-decl b1name b1arity
                                        (add-decl rhname rharity (rtn acc
                                                                      (string-append
                                                                       rel-txt
                                                                       (format "~a(~a) :-\n  ~a(~a),\n  ~a(~a).\n\n"
                                                                               rhname
                                                                               (string-join (c `(,(string->symbol "0") . ,hargs)) ",")
                                                                               b0name
                                                                               (string-join (c `(,id0 . ,b0args)) ",")
                                                                               b1name
                                                                               (string-join (c `(,id1 . ,b1args)) ",")))))))]
                   [`(srule ((rel-arity ,rhnamer ,rharity) ,hargs ...)
                            (= ,id0 ((rel-arity ,b0namer ,b0arity) ,b0args ...)))
                    (define rhname (r->s rhnamer))
                    (define b0name (r->s b0namer))
                    (add-decl b0name b0arity
                              (add-decl rhname (add1 rharity) (rtn acc
                                                            (string-append
                                                             rel-txt
                                                             (format "~a(~a) :-\n  ~a(~a).\n\n"
                                                                     rhname
                                                                     (string-join (c `(,(string->symbol "0") . ,hargs)) ",")
                                                                     b0name
                                                                     (string-join (c `(,id0 . ,b0args)) ","))))))]))
               (cons "" (set))
               (hash-keys rules-h)))
      (string-append 
       "// Autogenerated souffle program\n"
       (apply string-append  (set->list (cdr relation-txt)))
       (car relation-txt)))))
