(entry-point
 (app (lam 0 (app (ref 0) (ref 0))) (lam 1 (ref 1))))

; Entry points
[(entry-point e)
 -->
 (eval e (bot 0) (bot 0) (halt (entry-point e)) [])]

; Eval states 
[(step
  ?(eval (ref x) env sto k t)
  (ret v sto k))
 <--
 (store-map sto a v)
 --
 (env-map env x a)]

(step
 ?(eval (lam x e) env sto k t)
 (ret (clo (lam x e) env) sto k))

(step
 ?(eval (app ef ea) env sto k t)
 (eval ef env sto (ap-k ea env k t (app ef ea)) t))

; Ret states
(step
 ?(ret v sto (ap-k ea env k t app-e))
 (eval ea env sto (fn-k v k t app-e) t))

(step
 ?(ret v sto (fn-k fv k t app-e))
 (apply fv v sto k []))

; Apply states
(step
 ?(apply (clo (lam x e) env) v sto k t)
 (eval e (environment env x (vaddr x t)) (store sto (vaddr x t) v) k t))

; Env/store lookup & update
;(lookup ?do(x env sto) {store-lookup !do({env-lookup !do(x env)} sto)})
;[(env-lookup ?do(x env) a) <-- (env-map env x a)]
;[(store-lookup ?do(a sto) v) <-- (store-map sto a v)]
;(ext-env ?do(env x a) (environment env x a))
;(ext-store ?do(sto a v) (store sto a v))
(env-map ?(environment env x a) x a)
[(env-map ?(environment env y _) x a)
 <--
 (=/= x y)
 (env-map env x a)]
(store-map ?(store sto a v) a v)
[(store-map ?(store sto a' _) a v)
 <--
 (=/= a a')
 (store-map sto a v)]

