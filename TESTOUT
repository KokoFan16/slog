>>>>>>>>>>>>>>>>> NOW TESTING >>>>>>>>>>>>>>>>>
compiler/unit-tests/aggregators.slog
Comiplation failed!
>>>>>>>>>>>>>>>>> NOW TESTING >>>>>>>>>>>>>>>>>
compiler/unit-tests/comp-rels.slog
Comiplation failed!
>>>>>>>>>>>>>>>>> NOW TESTING >>>>>>>>>>>>>>>>>
compiler/unit-tests/curly-clauses.slog
Comiplation failed!
>>>>>>>>>>>>>>>>> NOW TESTING >>>>>>>>>>>>>>>>>
compiler/unit-tests/multi-splicing-lists.slog
expect: {'(query _)': ['(query ($lst 1 ($lst 2 ($nil)', '(query ($lst 2 ($lst 1 ($nil)', '(query ($lst 3 ($nil)']}
but get: None
>>>>>>>>>>>>>>>>> NOW TESTING >>>>>>>>>>>>>>>>>
compiler/unit-tests/repeated-vars-in-clauses.slog
expect: {'(a-foo _ _ _)': ['(a-ctx (a-null 0)', '(a-null 0)', '(a-null 0)', '(a-ctx 1234 (a-null 0)', '(a-null 0)'], '(b-baz _)': ['(b-baz (b-bar 1 (b-null 0)', '(b-null 0)']}
but get: None
expect: {'(a-foo _ _ _)': ['(a-ctx (a-null 0)', '(a-null 0)', '(a-null 0)', '(a-ctx 1234 (a-null 0)', '(a-null 0)'], '(b-baz _)': ['(b-baz (b-bar 1 (b-null 0)', '(b-null 0)']}
but get: None
>>>>>>>>>>>>>>>>> NOW TESTING >>>>>>>>>>>>>>>>>
compiler/unit-tests/builtins-behavior.slog
Comiplation failed!
>>>>>>>>>>>>>>>>> NOW TESTING >>>>>>>>>>>>>>>>>
compiler/unit-tests/consts-repeated-vars.slog
Comiplation failed!
>>>>>>>>>>>>>>>>> NOW TESTING >>>>>>>>>>>>>>>>>
compiler/unit-tests/normalizer.slog
Comiplation failed!
>>>>>>>>>>>>>>>>> NOW TESTING >>>>>>>>>>>>>>>>>
compiler/unit-tests/cesk-symbolic.slog
Comiplation failed!
>>>>>>>>>>>>>>>>> NOW TESTING >>>>>>>>>>>>>>>>>
compiler/unit-tests/builtins-interning.slog
Comiplation failed!
>>>>>>>>>>>>>>>>> NOW TESTING >>>>>>>>>>>>>>>>>
compiler/unit-tests/extra-list-syntax.slog
expect: {'(a-query _)': ['(a-query ($lst 1 ($lst 2 ($lst 3 ($nil)', '(a-query ($lst 0 ($lst 1 ($lst 2 ($nil)'], '(b-baz _)': ['(b-baz ($lst 11 ($lst 12 ($nil)']}
but get: None
expect: {'(a-query _)': ['(a-query ($lst 1 ($lst 2 ($lst 3 ($nil)', '(a-query ($lst 0 ($lst 1 ($lst 2 ($nil)'], '(b-baz _)': ['(b-baz ($lst 11 ($lst 12 ($nil)']}
but get: None
>>>>>>>>>>>>>>>>> NOW TESTING >>>>>>>>>>>>>>>>>
compiler/unit-tests/sort.slog
expect: {'(sort-output _ _)': ['(cons 4 (cons 2 (cons 1 (cons 6 (cons 9 (cons 0 (null)', '(cons 4 (cons 6 (cons 9 (cons 9 (cons 10 (cons 11 (null)']}
but get: None
>>>>>>>>>>>>>>>>> NOW TESTING >>>>>>>>>>>>>>>>>
compiler/unit-tests/resolved-bug-spurious-fact.slog
Comiplation failed!
>>>>>>>>>>>>>>>>> NOW TESTING >>>>>>>>>>>>>>>>>
compiler/unit-tests/splicing-lists.slog
expect: {'(foo-ends _ _ _)': ['(foo-ends (foo ($lst 1 ($lst 2 ($lst 3 ($lst 4 ($nil)'], '(x4-x2-3-x1 _)': ['(x4-x2-3-x1 ($lst 4 ($lst 2 ($lst 3 ($lst 1 ($nil)'], '(three-to-one _)': ['(three-to-one ($lst 3 ($lst 2 ($lst 1 ($nil)'], '(one-to-three _)': ['(one-to-three ($lst 1 ($lst 2 ($lst 3 ($nil)'], '(blue _)': ['($lst (One 1)', '($lst 2 ($lst 3 ($lst (Four 4)', '(Wrapped ($lst 0 ($lst 1 ($lst 2 ($lst 3 ($lst 4 ($lst 5 ($nil)', '($nil)'], '(green-after-magic _)': ['($lst 2 ($lst 20 ($lst 2 ($lst 30 ($lst 2 ($lst 2 ($nil)'], '(thumbs-up)': ['(thumbs-up)'], '(j-bar _ _)': ['($lst ($lst 1 ($lst 2 ($nil)', '($nil)', '(j-quax ($lst 10 ($lst 1 ($lst 2 ($nil)'], ';(k-bar _)': ['($lst 1 ($lst 2 ($lst 3 ($nil)'], '(l-D _)': ['($lst (l-B ($lst 1 ($lst 2 ($lst (l-A 42)', '($nil)', '($nil)'], '(m-bar _)': ['(m-bar ($lst 13 ($lst 42 ($nil)', '(m-bar ($nil)'], '(n-bar _ _)': ['($lst 10 ($lst 11 ($lst 12 ($nil)', '($lst 100 ($lst 101 ($lst 102 ($nil)'], '(o-bar _ _)': ['($lst 1 ($lst 2 ($nil)', '($lst 4 ($lst 100 ($lst 6 ($nil)', '($lst 2 ($lst 100 ($lst 4 ($nil)', '($lst 6 ($nil)'], '(p-bar _ _ _)': ['(p-bar 1 10 11)']}
but get: None
expect: {'(foo-ends _ _ _)': ['(foo-ends (foo ($lst 1 ($lst 2 ($lst 3 ($lst 4 ($nil)'], '(x4-x2-3-x1 _)': ['(x4-x2-3-x1 ($lst 4 ($lst 2 ($lst 3 ($lst 1 ($nil)'], '(three-to-one _)': ['(three-to-one ($lst 3 ($lst 2 ($lst 1 ($nil)'], '(one-to-three _)': ['(one-to-three ($lst 1 ($lst 2 ($lst 3 ($nil)'], '(blue _)': ['($lst (One 1)', '($lst 2 ($lst 3 ($lst (Four 4)', '(Wrapped ($lst 0 ($lst 1 ($lst 2 ($lst 3 ($lst 4 ($lst 5 ($nil)', '($nil)'], '(green-after-magic _)': ['($lst 2 ($lst 20 ($lst 2 ($lst 30 ($lst 2 ($lst 2 ($nil)'], '(thumbs-up)': ['(thumbs-up)'], '(j-bar _ _)': ['($lst ($lst 1 ($lst 2 ($nil)', '($nil)', '(j-quax ($lst 10 ($lst 1 ($lst 2 ($nil)'], ';(k-bar _)': ['($lst 1 ($lst 2 ($lst 3 ($nil)'], '(l-D _)': ['($lst (l-B ($lst 1 ($lst 2 ($lst (l-A 42)', '($nil)', '($nil)'], '(m-bar _)': ['(m-bar ($lst 13 ($lst 42 ($nil)', '(m-bar ($nil)'], '(n-bar _ _)': ['($lst 10 ($lst 11 ($lst 12 ($nil)', '($lst 100 ($lst 101 ($lst 102 ($nil)'], '(o-bar _ _)': ['($lst 1 ($lst 2 ($nil)', '($lst 4 ($lst 100 ($lst 6 ($nil)', '($lst 2 ($lst 100 ($lst 4 ($nil)', '($lst 6 ($nil)'], '(p-bar _ _ _)': ['(p-bar 1 10 11)']}
but get: None
expect: {'(foo-ends _ _ _)': ['(foo-ends (foo ($lst 1 ($lst 2 ($lst 3 ($lst 4 ($nil)'], '(x4-x2-3-x1 _)': ['(x4-x2-3-x1 ($lst 4 ($lst 2 ($lst 3 ($lst 1 ($nil)'], '(three-to-one _)': ['(three-to-one ($lst 3 ($lst 2 ($lst 1 ($nil)'], '(one-to-three _)': ['(one-to-three ($lst 1 ($lst 2 ($lst 3 ($nil)'], '(blue _)': ['($lst (One 1)', '($lst 2 ($lst 3 ($lst (Four 4)', '(Wrapped ($lst 0 ($lst 1 ($lst 2 ($lst 3 ($lst 4 ($lst 5 ($nil)', '($nil)'], '(green-after-magic _)': ['($lst 2 ($lst 20 ($lst 2 ($lst 30 ($lst 2 ($lst 2 ($nil)'], '(thumbs-up)': ['(thumbs-up)'], '(j-bar _ _)': ['($lst ($lst 1 ($lst 2 ($nil)', '($nil)', '(j-quax ($lst 10 ($lst 1 ($lst 2 ($nil)'], ';(k-bar _)': ['($lst 1 ($lst 2 ($lst 3 ($nil)'], '(l-D _)': ['($lst (l-B ($lst 1 ($lst 2 ($lst (l-A 42)', '($nil)', '($nil)'], '(m-bar _)': ['(m-bar ($lst 13 ($lst 42 ($nil)', '(m-bar ($nil)'], '(n-bar _ _)': ['($lst 10 ($lst 11 ($lst 12 ($nil)', '($lst 100 ($lst 101 ($lst 102 ($nil)'], '(o-bar _ _)': ['($lst 1 ($lst 2 ($nil)', '($lst 4 ($lst 100 ($lst 6 ($nil)', '($lst 2 ($lst 100 ($lst 4 ($nil)', '($lst 6 ($nil)'], '(p-bar _ _ _)': ['(p-bar 1 10 11)']}
but get: None
expect: {'(foo-ends _ _ _)': ['(foo-ends (foo ($lst 1 ($lst 2 ($lst 3 ($lst 4 ($nil)'], '(x4-x2-3-x1 _)': ['(x4-x2-3-x1 ($lst 4 ($lst 2 ($lst 3 ($lst 1 ($nil)'], '(three-to-one _)': ['(three-to-one ($lst 3 ($lst 2 ($lst 1 ($nil)'], '(one-to-three _)': ['(one-to-three ($lst 1 ($lst 2 ($lst 3 ($nil)'], '(blue _)': ['($lst (One 1)', '($lst 2 ($lst 3 ($lst (Four 4)', '(Wrapped ($lst 0 ($lst 1 ($lst 2 ($lst 3 ($lst 4 ($lst 5 ($nil)', '($nil)'], '(green-after-magic _)': ['($lst 2 ($lst 20 ($lst 2 ($lst 30 ($lst 2 ($lst 2 ($nil)'], '(thumbs-up)': ['(thumbs-up)'], '(j-bar _ _)': ['($lst ($lst 1 ($lst 2 ($nil)', '($nil)', '(j-quax ($lst 10 ($lst 1 ($lst 2 ($nil)'], ';(k-bar _)': ['($lst 1 ($lst 2 ($lst 3 ($nil)'], '(l-D _)': ['($lst (l-B ($lst 1 ($lst 2 ($lst (l-A 42)', '($nil)', '($nil)'], '(m-bar _)': ['(m-bar ($lst 13 ($lst 42 ($nil)', '(m-bar ($nil)'], '(n-bar _ _)': ['($lst 10 ($lst 11 ($lst 12 ($nil)', '($lst 100 ($lst 101 ($lst 102 ($nil)'], '(o-bar _ _)': ['($lst 1 ($lst 2 ($nil)', '($lst 4 ($lst 100 ($lst 6 ($nil)', '($lst 2 ($lst 100 ($lst 4 ($nil)', '($lst 6 ($nil)'], '(p-bar _ _ _)': ['(p-bar 1 10 11)']}
but get: None
expect: {'(foo-ends _ _ _)': ['(foo-ends (foo ($lst 1 ($lst 2 ($lst 3 ($lst 4 ($nil)'], '(x4-x2-3-x1 _)': ['(x4-x2-3-x1 ($lst 4 ($lst 2 ($lst 3 ($lst 1 ($nil)'], '(three-to-one _)': ['(three-to-one ($lst 3 ($lst 2 ($lst 1 ($nil)'], '(one-to-three _)': ['(one-to-three ($lst 1 ($lst 2 ($lst 3 ($nil)'], '(blue _)': ['($lst (One 1)', '($lst 2 ($lst 3 ($lst (Four 4)', '(Wrapped ($lst 0 ($lst 1 ($lst 2 ($lst 3 ($lst 4 ($lst 5 ($nil)', '($nil)'], '(green-after-magic _)': ['($lst 2 ($lst 20 ($lst 2 ($lst 30 ($lst 2 ($lst 2 ($nil)'], '(thumbs-up)': ['(thumbs-up)'], '(j-bar _ _)': ['($lst ($lst 1 ($lst 2 ($nil)', '($nil)', '(j-quax ($lst 10 ($lst 1 ($lst 2 ($nil)'], ';(k-bar _)': ['($lst 1 ($lst 2 ($lst 3 ($nil)'], '(l-D _)': ['($lst (l-B ($lst 1 ($lst 2 ($lst (l-A 42)', '($nil)', '($nil)'], '(m-bar _)': ['(m-bar ($lst 13 ($lst 42 ($nil)', '(m-bar ($nil)'], '(n-bar _ _)': ['($lst 10 ($lst 11 ($lst 12 ($nil)', '($lst 100 ($lst 101 ($lst 102 ($nil)'], '(o-bar _ _)': ['($lst 1 ($lst 2 ($nil)', '($lst 4 ($lst 100 ($lst 6 ($nil)', '($lst 2 ($lst 100 ($lst 4 ($nil)', '($lst 6 ($nil)'], '(p-bar _ _ _)': ['(p-bar 1 10 11)']}
but get: None
expect: {'(foo-ends _ _ _)': ['(foo-ends (foo ($lst 1 ($lst 2 ($lst 3 ($lst 4 ($nil)'], '(x4-x2-3-x1 _)': ['(x4-x2-3-x1 ($lst 4 ($lst 2 ($lst 3 ($lst 1 ($nil)'], '(three-to-one _)': ['(three-to-one ($lst 3 ($lst 2 ($lst 1 ($nil)'], '(one-to-three _)': ['(one-to-three ($lst 1 ($lst 2 ($lst 3 ($nil)'], '(blue _)': ['($lst (One 1)', '($lst 2 ($lst 3 ($lst (Four 4)', '(Wrapped ($lst 0 ($lst 1 ($lst 2 ($lst 3 ($lst 4 ($lst 5 ($nil)', '($nil)'], '(green-after-magic _)': ['($lst 2 ($lst 20 ($lst 2 ($lst 30 ($lst 2 ($lst 2 ($nil)'], '(thumbs-up)': ['(thumbs-up)'], '(j-bar _ _)': ['($lst ($lst 1 ($lst 2 ($nil)', '($nil)', '(j-quax ($lst 10 ($lst 1 ($lst 2 ($nil)'], ';(k-bar _)': ['($lst 1 ($lst 2 ($lst 3 ($nil)'], '(l-D _)': ['($lst (l-B ($lst 1 ($lst 2 ($lst (l-A 42)', '($nil)', '($nil)'], '(m-bar _)': ['(m-bar ($lst 13 ($lst 42 ($nil)', '(m-bar ($nil)'], '(n-bar _ _)': ['($lst 10 ($lst 11 ($lst 12 ($nil)', '($lst 100 ($lst 101 ($lst 102 ($nil)'], '(o-bar _ _)': ['($lst 1 ($lst 2 ($nil)', '($lst 4 ($lst 100 ($lst 6 ($nil)', '($lst 2 ($lst 100 ($lst 4 ($nil)', '($lst 6 ($nil)'], '(p-bar _ _ _)': ['(p-bar 1 10 11)']}
but get: None
expect: {'(foo-ends _ _ _)': ['(foo-ends (foo ($lst 1 ($lst 2 ($lst 3 ($lst 4 ($nil)'], '(x4-x2-3-x1 _)': ['(x4-x2-3-x1 ($lst 4 ($lst 2 ($lst 3 ($lst 1 ($nil)'], '(three-to-one _)': ['(three-to-one ($lst 3 ($lst 2 ($lst 1 ($nil)'], '(one-to-three _)': ['(one-to-three ($lst 1 ($lst 2 ($lst 3 ($nil)'], '(blue _)': ['($lst (One 1)', '($lst 2 ($lst 3 ($lst (Four 4)', '(Wrapped ($lst 0 ($lst 1 ($lst 2 ($lst 3 ($lst 4 ($lst 5 ($nil)', '($nil)'], '(green-after-magic _)': ['($lst 2 ($lst 20 ($lst 2 ($lst 30 ($lst 2 ($lst 2 ($nil)'], '(thumbs-up)': ['(thumbs-up)'], '(j-bar _ _)': ['($lst ($lst 1 ($lst 2 ($nil)', '($nil)', '(j-quax ($lst 10 ($lst 1 ($lst 2 ($nil)'], ';(k-bar _)': ['($lst 1 ($lst 2 ($lst 3 ($nil)'], '(l-D _)': ['($lst (l-B ($lst 1 ($lst 2 ($lst (l-A 42)', '($nil)', '($nil)'], '(m-bar _)': ['(m-bar ($lst 13 ($lst 42 ($nil)', '(m-bar ($nil)'], '(n-bar _ _)': ['($lst 10 ($lst 11 ($lst 12 ($nil)', '($lst 100 ($lst 101 ($lst 102 ($nil)'], '(o-bar _ _)': ['($lst 1 ($lst 2 ($nil)', '($lst 4 ($lst 100 ($lst 6 ($nil)', '($lst 2 ($lst 100 ($lst 4 ($nil)', '($lst 6 ($nil)'], '(p-bar _ _ _)': ['(p-bar 1 10 11)']}
but get: None
expect: {'(foo-ends _ _ _)': ['(foo-ends (foo ($lst 1 ($lst 2 ($lst 3 ($lst 4 ($nil)'], '(x4-x2-3-x1 _)': ['(x4-x2-3-x1 ($lst 4 ($lst 2 ($lst 3 ($lst 1 ($nil)'], '(three-to-one _)': ['(three-to-one ($lst 3 ($lst 2 ($lst 1 ($nil)'], '(one-to-three _)': ['(one-to-three ($lst 1 ($lst 2 ($lst 3 ($nil)'], '(blue _)': ['($lst (One 1)', '($lst 2 ($lst 3 ($lst (Four 4)', '(Wrapped ($lst 0 ($lst 1 ($lst 2 ($lst 3 ($lst 4 ($lst 5 ($nil)', '($nil)'], '(green-after-magic _)': ['($lst 2 ($lst 20 ($lst 2 ($lst 30 ($lst 2 ($lst 2 ($nil)'], '(thumbs-up)': ['(thumbs-up)'], '(j-bar _ _)': ['($lst ($lst 1 ($lst 2 ($nil)', '($nil)', '(j-quax ($lst 10 ($lst 1 ($lst 2 ($nil)'], ';(k-bar _)': ['($lst 1 ($lst 2 ($lst 3 ($nil)'], '(l-D _)': ['($lst (l-B ($lst 1 ($lst 2 ($lst (l-A 42)', '($nil)', '($nil)'], '(m-bar _)': ['(m-bar ($lst 13 ($lst 42 ($nil)', '(m-bar ($nil)'], '(n-bar _ _)': ['($lst 10 ($lst 11 ($lst 12 ($nil)', '($lst 100 ($lst 101 ($lst 102 ($nil)'], '(o-bar _ _)': ['($lst 1 ($lst 2 ($nil)', '($lst 4 ($lst 100 ($lst 6 ($nil)', '($lst 2 ($lst 100 ($lst 4 ($nil)', '($lst 6 ($nil)'], '(p-bar _ _ _)': ['(p-bar 1 10 11)']}
but get: None
expect: {'(foo-ends _ _ _)': ['(foo-ends (foo ($lst 1 ($lst 2 ($lst 3 ($lst 4 ($nil)'], '(x4-x2-3-x1 _)': ['(x4-x2-3-x1 ($lst 4 ($lst 2 ($lst 3 ($lst 1 ($nil)'], '(three-to-one _)': ['(three-to-one ($lst 3 ($lst 2 ($lst 1 ($nil)'], '(one-to-three _)': ['(one-to-three ($lst 1 ($lst 2 ($lst 3 ($nil)'], '(blue _)': ['($lst (One 1)', '($lst 2 ($lst 3 ($lst (Four 4)', '(Wrapped ($lst 0 ($lst 1 ($lst 2 ($lst 3 ($lst 4 ($lst 5 ($nil)', '($nil)'], '(green-after-magic _)': ['($lst 2 ($lst 20 ($lst 2 ($lst 30 ($lst 2 ($lst 2 ($nil)'], '(thumbs-up)': ['(thumbs-up)'], '(j-bar _ _)': ['($lst ($lst 1 ($lst 2 ($nil)', '($nil)', '(j-quax ($lst 10 ($lst 1 ($lst 2 ($nil)'], ';(k-bar _)': ['($lst 1 ($lst 2 ($lst 3 ($nil)'], '(l-D _)': ['($lst (l-B ($lst 1 ($lst 2 ($lst (l-A 42)', '($nil)', '($nil)'], '(m-bar _)': ['(m-bar ($lst 13 ($lst 42 ($nil)', '(m-bar ($nil)'], '(n-bar _ _)': ['($lst 10 ($lst 11 ($lst 12 ($nil)', '($lst 100 ($lst 101 ($lst 102 ($nil)'], '(o-bar _ _)': ['($lst 1 ($lst 2 ($nil)', '($lst 4 ($lst 100 ($lst 6 ($nil)', '($lst 2 ($lst 100 ($lst 4 ($nil)', '($lst 6 ($nil)'], '(p-bar _ _ _)': ['(p-bar 1 10 11)']}
but get: None
expect: {'(foo-ends _ _ _)': ['(foo-ends (foo ($lst 1 ($lst 2 ($lst 3 ($lst 4 ($nil)'], '(x4-x2-3-x1 _)': ['(x4-x2-3-x1 ($lst 4 ($lst 2 ($lst 3 ($lst 1 ($nil)'], '(three-to-one _)': ['(three-to-one ($lst 3 ($lst 2 ($lst 1 ($nil)'], '(one-to-three _)': ['(one-to-three ($lst 1 ($lst 2 ($lst 3 ($nil)'], '(blue _)': ['($lst (One 1)', '($lst 2 ($lst 3 ($lst (Four 4)', '(Wrapped ($lst 0 ($lst 1 ($lst 2 ($lst 3 ($lst 4 ($lst 5 ($nil)', '($nil)'], '(green-after-magic _)': ['($lst 2 ($lst 20 ($lst 2 ($lst 30 ($lst 2 ($lst 2 ($nil)'], '(thumbs-up)': ['(thumbs-up)'], '(j-bar _ _)': ['($lst ($lst 1 ($lst 2 ($nil)', '($nil)', '(j-quax ($lst 10 ($lst 1 ($lst 2 ($nil)'], ';(k-bar _)': ['($lst 1 ($lst 2 ($lst 3 ($nil)'], '(l-D _)': ['($lst (l-B ($lst 1 ($lst 2 ($lst (l-A 42)', '($nil)', '($nil)'], '(m-bar _)': ['(m-bar ($lst 13 ($lst 42 ($nil)', '(m-bar ($nil)'], '(n-bar _ _)': ['($lst 10 ($lst 11 ($lst 12 ($nil)', '($lst 100 ($lst 101 ($lst 102 ($nil)'], '(o-bar _ _)': ['($lst 1 ($lst 2 ($nil)', '($lst 4 ($lst 100 ($lst 6 ($nil)', '($lst 2 ($lst 100 ($lst 4 ($nil)', '($lst 6 ($nil)'], '(p-bar _ _ _)': ['(p-bar 1 10 11)']}
but get: None
expect: {'(foo-ends _ _ _)': ['(foo-ends (foo ($lst 1 ($lst 2 ($lst 3 ($lst 4 ($nil)'], '(x4-x2-3-x1 _)': ['(x4-x2-3-x1 ($lst 4 ($lst 2 ($lst 3 ($lst 1 ($nil)'], '(three-to-one _)': ['(three-to-one ($lst 3 ($lst 2 ($lst 1 ($nil)'], '(one-to-three _)': ['(one-to-three ($lst 1 ($lst 2 ($lst 3 ($nil)'], '(blue _)': ['($lst (One 1)', '($lst 2 ($lst 3 ($lst (Four 4)', '(Wrapped ($lst 0 ($lst 1 ($lst 2 ($lst 3 ($lst 4 ($lst 5 ($nil)', '($nil)'], '(green-after-magic _)': ['($lst 2 ($lst 20 ($lst 2 ($lst 30 ($lst 2 ($lst 2 ($nil)'], '(thumbs-up)': ['(thumbs-up)'], '(j-bar _ _)': ['($lst ($lst 1 ($lst 2 ($nil)', '($nil)', '(j-quax ($lst 10 ($lst 1 ($lst 2 ($nil)'], ';(k-bar _)': ['($lst 1 ($lst 2 ($lst 3 ($nil)'], '(l-D _)': ['($lst (l-B ($lst 1 ($lst 2 ($lst (l-A 42)', '($nil)', '($nil)'], '(m-bar _)': ['(m-bar ($lst 13 ($lst 42 ($nil)', '(m-bar ($nil)'], '(n-bar _ _)': ['($lst 10 ($lst 11 ($lst 12 ($nil)', '($lst 100 ($lst 101 ($lst 102 ($nil)'], '(o-bar _ _)': ['($lst 1 ($lst 2 ($nil)', '($lst 4 ($lst 100 ($lst 6 ($nil)', '($lst 2 ($lst 100 ($lst 4 ($nil)', '($lst 6 ($nil)'], '(p-bar _ _ _)': ['(p-bar 1 10 11)']}
but get: None
expect: {'(foo-ends _ _ _)': ['(foo-ends (foo ($lst 1 ($lst 2 ($lst 3 ($lst 4 ($nil)'], '(x4-x2-3-x1 _)': ['(x4-x2-3-x1 ($lst 4 ($lst 2 ($lst 3 ($lst 1 ($nil)'], '(three-to-one _)': ['(three-to-one ($lst 3 ($lst 2 ($lst 1 ($nil)'], '(one-to-three _)': ['(one-to-three ($lst 1 ($lst 2 ($lst 3 ($nil)'], '(blue _)': ['($lst (One 1)', '($lst 2 ($lst 3 ($lst (Four 4)', '(Wrapped ($lst 0 ($lst 1 ($lst 2 ($lst 3 ($lst 4 ($lst 5 ($nil)', '($nil)'], '(green-after-magic _)': ['($lst 2 ($lst 20 ($lst 2 ($lst 30 ($lst 2 ($lst 2 ($nil)'], '(thumbs-up)': ['(thumbs-up)'], '(j-bar _ _)': ['($lst ($lst 1 ($lst 2 ($nil)', '($nil)', '(j-quax ($lst 10 ($lst 1 ($lst 2 ($nil)'], ';(k-bar _)': ['($lst 1 ($lst 2 ($lst 3 ($nil)'], '(l-D _)': ['($lst (l-B ($lst 1 ($lst 2 ($lst (l-A 42)', '($nil)', '($nil)'], '(m-bar _)': ['(m-bar ($lst 13 ($lst 42 ($nil)', '(m-bar ($nil)'], '(n-bar _ _)': ['($lst 10 ($lst 11 ($lst 12 ($nil)', '($lst 100 ($lst 101 ($lst 102 ($nil)'], '(o-bar _ _)': ['($lst 1 ($lst 2 ($nil)', '($lst 4 ($lst 100 ($lst 6 ($nil)', '($lst 2 ($lst 100 ($lst 4 ($nil)', '($lst 6 ($nil)'], '(p-bar _ _ _)': ['(p-bar 1 10 11)']}
but get: None
expect: {'(foo-ends _ _ _)': ['(foo-ends (foo ($lst 1 ($lst 2 ($lst 3 ($lst 4 ($nil)'], '(x4-x2-3-x1 _)': ['(x4-x2-3-x1 ($lst 4 ($lst 2 ($lst 3 ($lst 1 ($nil)'], '(three-to-one _)': ['(three-to-one ($lst 3 ($lst 2 ($lst 1 ($nil)'], '(one-to-three _)': ['(one-to-three ($lst 1 ($lst 2 ($lst 3 ($nil)'], '(blue _)': ['($lst (One 1)', '($lst 2 ($lst 3 ($lst (Four 4)', '(Wrapped ($lst 0 ($lst 1 ($lst 2 ($lst 3 ($lst 4 ($lst 5 ($nil)', '($nil)'], '(green-after-magic _)': ['($lst 2 ($lst 20 ($lst 2 ($lst 30 ($lst 2 ($lst 2 ($nil)'], '(thumbs-up)': ['(thumbs-up)'], '(j-bar _ _)': ['($lst ($lst 1 ($lst 2 ($nil)', '($nil)', '(j-quax ($lst 10 ($lst 1 ($lst 2 ($nil)'], ';(k-bar _)': ['($lst 1 ($lst 2 ($lst 3 ($nil)'], '(l-D _)': ['($lst (l-B ($lst 1 ($lst 2 ($lst (l-A 42)', '($nil)', '($nil)'], '(m-bar _)': ['(m-bar ($lst 13 ($lst 42 ($nil)', '(m-bar ($nil)'], '(n-bar _ _)': ['($lst 10 ($lst 11 ($lst 12 ($nil)', '($lst 100 ($lst 101 ($lst 102 ($nil)'], '(o-bar _ _)': ['($lst 1 ($lst 2 ($nil)', '($lst 4 ($lst 100 ($lst 6 ($nil)', '($lst 2 ($lst 100 ($lst 4 ($nil)', '($lst 6 ($nil)'], '(p-bar _ _ _)': ['(p-bar 1 10 11)']}
but get: None
expect: {'(foo-ends _ _ _)': ['(foo-ends (foo ($lst 1 ($lst 2 ($lst 3 ($lst 4 ($nil)'], '(x4-x2-3-x1 _)': ['(x4-x2-3-x1 ($lst 4 ($lst 2 ($lst 3 ($lst 1 ($nil)'], '(three-to-one _)': ['(three-to-one ($lst 3 ($lst 2 ($lst 1 ($nil)'], '(one-to-three _)': ['(one-to-three ($lst 1 ($lst 2 ($lst 3 ($nil)'], '(blue _)': ['($lst (One 1)', '($lst 2 ($lst 3 ($lst (Four 4)', '(Wrapped ($lst 0 ($lst 1 ($lst 2 ($lst 3 ($lst 4 ($lst 5 ($nil)', '($nil)'], '(green-after-magic _)': ['($lst 2 ($lst 20 ($lst 2 ($lst 30 ($lst 2 ($lst 2 ($nil)'], '(thumbs-up)': ['(thumbs-up)'], '(j-bar _ _)': ['($lst ($lst 1 ($lst 2 ($nil)', '($nil)', '(j-quax ($lst 10 ($lst 1 ($lst 2 ($nil)'], ';(k-bar _)': ['($lst 1 ($lst 2 ($lst 3 ($nil)'], '(l-D _)': ['($lst (l-B ($lst 1 ($lst 2 ($lst (l-A 42)', '($nil)', '($nil)'], '(m-bar _)': ['(m-bar ($lst 13 ($lst 42 ($nil)', '(m-bar ($nil)'], '(n-bar _ _)': ['($lst 10 ($lst 11 ($lst 12 ($nil)', '($lst 100 ($lst 101 ($lst 102 ($nil)'], '(o-bar _ _)': ['($lst 1 ($lst 2 ($nil)', '($lst 4 ($lst 100 ($lst 6 ($nil)', '($lst 2 ($lst 100 ($lst 4 ($nil)', '($lst 6 ($nil)'], '(p-bar _ _ _)': ['(p-bar 1 10 11)']}
but get: None
>>>>>>>>>>>>>>>>> NOW TESTING >>>>>>>>>>>>>>>>>
compiler/unit-tests/static-unification-inner-rules.slog
expect: {'(a-inner-head _)': ['(a-inner-head 1)', '(a-inner-head 2)'], '(a-outer-head _)': ['(a-outer-head 2)'], '(b-inner-head _)': ['(b-inner-head 1)', '(b-inner-head 2)'], '(b-outer-head _)': ['(b-outer-head 2)'], '(c-brass _)': ['(c-brass (c-sas 2)'], '(c-sas _)': ['(c-sas 1)', '(c-sas 2)'], '(d-hirbirh _ _)': ['(d-hirbirh 1 1)', '(d-hirbirh 1 2)'], '(d-hirh _ _)': ['(d-hirh 1 2)'], '(d-hirbirh0 _ _)': ['(d-hirbirh0 1 100)', '(d-hirbirh0 1 101)', '(d-hirbirh0 10 100)', '(d-hirbirh0 10 101)'], '(e-head _)': [], '(f-bar _)': ['(f-bar 3)']}
but get: None
expect: {'(a-inner-head _)': ['(a-inner-head 1)', '(a-inner-head 2)'], '(a-outer-head _)': ['(a-outer-head 2)'], '(b-inner-head _)': ['(b-inner-head 1)', '(b-inner-head 2)'], '(b-outer-head _)': ['(b-outer-head 2)'], '(c-brass _)': ['(c-brass (c-sas 2)'], '(c-sas _)': ['(c-sas 1)', '(c-sas 2)'], '(d-hirbirh _ _)': ['(d-hirbirh 1 1)', '(d-hirbirh 1 2)'], '(d-hirh _ _)': ['(d-hirh 1 2)'], '(d-hirbirh0 _ _)': ['(d-hirbirh0 1 100)', '(d-hirbirh0 1 101)', '(d-hirbirh0 10 100)', '(d-hirbirh0 10 101)'], '(e-head _)': [], '(f-bar _)': ['(f-bar 3)']}
but get: None
expect: {'(a-inner-head _)': ['(a-inner-head 1)', '(a-inner-head 2)'], '(a-outer-head _)': ['(a-outer-head 2)'], '(b-inner-head _)': ['(b-inner-head 1)', '(b-inner-head 2)'], '(b-outer-head _)': ['(b-outer-head 2)'], '(c-brass _)': ['(c-brass (c-sas 2)'], '(c-sas _)': ['(c-sas 1)', '(c-sas 2)'], '(d-hirbirh _ _)': ['(d-hirbirh 1 1)', '(d-hirbirh 1 2)'], '(d-hirh _ _)': ['(d-hirh 1 2)'], '(d-hirbirh0 _ _)': ['(d-hirbirh0 1 100)', '(d-hirbirh0 1 101)', '(d-hirbirh0 10 100)', '(d-hirbirh0 10 101)'], '(e-head _)': [], '(f-bar _)': ['(f-bar 3)']}
but get: None
expect: {'(a-inner-head _)': ['(a-inner-head 1)', '(a-inner-head 2)'], '(a-outer-head _)': ['(a-outer-head 2)'], '(b-inner-head _)': ['(b-inner-head 1)', '(b-inner-head 2)'], '(b-outer-head _)': ['(b-outer-head 2)'], '(c-brass _)': ['(c-brass (c-sas 2)'], '(c-sas _)': ['(c-sas 1)', '(c-sas 2)'], '(d-hirbirh _ _)': ['(d-hirbirh 1 1)', '(d-hirbirh 1 2)'], '(d-hirh _ _)': ['(d-hirh 1 2)'], '(d-hirbirh0 _ _)': ['(d-hirbirh0 1 100)', '(d-hirbirh0 1 101)', '(d-hirbirh0 10 100)', '(d-hirbirh0 10 101)'], '(e-head _)': [], '(f-bar _)': ['(f-bar 3)']}
but get: None
expect: {'(a-inner-head _)': ['(a-inner-head 1)', '(a-inner-head 2)'], '(a-outer-head _)': ['(a-outer-head 2)'], '(b-inner-head _)': ['(b-inner-head 1)', '(b-inner-head 2)'], '(b-outer-head _)': ['(b-outer-head 2)'], '(c-brass _)': ['(c-brass (c-sas 2)'], '(c-sas _)': ['(c-sas 1)', '(c-sas 2)'], '(d-hirbirh _ _)': ['(d-hirbirh 1 1)', '(d-hirbirh 1 2)'], '(d-hirh _ _)': ['(d-hirh 1 2)'], '(d-hirbirh0 _ _)': ['(d-hirbirh0 1 100)', '(d-hirbirh0 1 101)', '(d-hirbirh0 10 100)', '(d-hirbirh0 10 101)'], '(e-head _)': [], '(f-bar _)': ['(f-bar 3)']}
but get: None
expect: {'(a-inner-head _)': ['(a-inner-head 1)', '(a-inner-head 2)'], '(a-outer-head _)': ['(a-outer-head 2)'], '(b-inner-head _)': ['(b-inner-head 1)', '(b-inner-head 2)'], '(b-outer-head _)': ['(b-outer-head 2)'], '(c-brass _)': ['(c-brass (c-sas 2)'], '(c-sas _)': ['(c-sas 1)', '(c-sas 2)'], '(d-hirbirh _ _)': ['(d-hirbirh 1 1)', '(d-hirbirh 1 2)'], '(d-hirh _ _)': ['(d-hirh 1 2)'], '(d-hirbirh0 _ _)': ['(d-hirbirh0 1 100)', '(d-hirbirh0 1 101)', '(d-hirbirh0 10 100)', '(d-hirbirh0 10 101)'], '(e-head _)': [], '(f-bar _)': ['(f-bar 3)']}
but get: None
expect: {'(a-inner-head _)': ['(a-inner-head 1)', '(a-inner-head 2)'], '(a-outer-head _)': ['(a-outer-head 2)'], '(b-inner-head _)': ['(b-inner-head 1)', '(b-inner-head 2)'], '(b-outer-head _)': ['(b-outer-head 2)'], '(c-brass _)': ['(c-brass (c-sas 2)'], '(c-sas _)': ['(c-sas 1)', '(c-sas 2)'], '(d-hirbirh _ _)': ['(d-hirbirh 1 1)', '(d-hirbirh 1 2)'], '(d-hirh _ _)': ['(d-hirh 1 2)'], '(d-hirbirh0 _ _)': ['(d-hirbirh0 1 100)', '(d-hirbirh0 1 101)', '(d-hirbirh0 10 100)', '(d-hirbirh0 10 101)'], '(e-head _)': [], '(f-bar _)': ['(f-bar 3)']}
but get: None
expect: {'(a-inner-head _)': ['(a-inner-head 1)', '(a-inner-head 2)'], '(a-outer-head _)': ['(a-outer-head 2)'], '(b-inner-head _)': ['(b-inner-head 1)', '(b-inner-head 2)'], '(b-outer-head _)': ['(b-outer-head 2)'], '(c-brass _)': ['(c-brass (c-sas 2)'], '(c-sas _)': ['(c-sas 1)', '(c-sas 2)'], '(d-hirbirh _ _)': ['(d-hirbirh 1 1)', '(d-hirbirh 1 2)'], '(d-hirh _ _)': ['(d-hirh 1 2)'], '(d-hirbirh0 _ _)': ['(d-hirbirh0 1 100)', '(d-hirbirh0 1 101)', '(d-hirbirh0 10 100)', '(d-hirbirh0 10 101)'], '(e-head _)': [], '(f-bar _)': ['(f-bar 3)']}
but get: None
expect: {'(a-inner-head _)': ['(a-inner-head 1)', '(a-inner-head 2)'], '(a-outer-head _)': ['(a-outer-head 2)'], '(b-inner-head _)': ['(b-inner-head 1)', '(b-inner-head 2)'], '(b-outer-head _)': ['(b-outer-head 2)'], '(c-brass _)': ['(c-brass (c-sas 2)'], '(c-sas _)': ['(c-sas 1)', '(c-sas 2)'], '(d-hirbirh _ _)': ['(d-hirbirh 1 1)', '(d-hirbirh 1 2)'], '(d-hirh _ _)': ['(d-hirh 1 2)'], '(d-hirbirh0 _ _)': ['(d-hirbirh0 1 100)', '(d-hirbirh0 1 101)', '(d-hirbirh0 10 100)', '(d-hirbirh0 10 101)'], '(e-head _)': [], '(f-bar _)': ['(f-bar 3)']}
but get: None
expect: {'(a-inner-head _)': ['(a-inner-head 1)', '(a-inner-head 2)'], '(a-outer-head _)': ['(a-outer-head 2)'], '(b-inner-head _)': ['(b-inner-head 1)', '(b-inner-head 2)'], '(b-outer-head _)': ['(b-outer-head 2)'], '(c-brass _)': ['(c-brass (c-sas 2)'], '(c-sas _)': ['(c-sas 1)', '(c-sas 2)'], '(d-hirbirh _ _)': ['(d-hirbirh 1 1)', '(d-hirbirh 1 2)'], '(d-hirh _ _)': ['(d-hirh 1 2)'], '(d-hirbirh0 _ _)': ['(d-hirbirh0 1 100)', '(d-hirbirh0 1 101)', '(d-hirbirh0 10 100)', '(d-hirbirh0 10 101)'], '(e-head _)': [], '(f-bar _)': ['(f-bar 3)']}
but get: None
expect: {'(a-inner-head _)': ['(a-inner-head 1)', '(a-inner-head 2)'], '(a-outer-head _)': ['(a-outer-head 2)'], '(b-inner-head _)': ['(b-inner-head 1)', '(b-inner-head 2)'], '(b-outer-head _)': ['(b-outer-head 2)'], '(c-brass _)': ['(c-brass (c-sas 2)'], '(c-sas _)': ['(c-sas 1)', '(c-sas 2)'], '(d-hirbirh _ _)': ['(d-hirbirh 1 1)', '(d-hirbirh 1 2)'], '(d-hirh _ _)': ['(d-hirh 1 2)'], '(d-hirbirh0 _ _)': ['(d-hirbirh0 1 100)', '(d-hirbirh0 1 101)', '(d-hirbirh0 10 100)', '(d-hirbirh0 10 101)'], '(e-head _)': [], '(f-bar _)': ['(f-bar 3)']}
but get: None
>>>>>>>>>>>>>>>>> NOW TESTING >>>>>>>>>>>>>>>>>
compiler/unit-tests/syntax-sugars.slog
Comiplation failed!
